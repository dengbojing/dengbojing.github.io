{"meta":{"title":"生活不易,砥砺前行","subtitle":"Keep farmed and carry hard","description":"","author":"Dengbojing","url":"http://denbgojing.com","root":"/"},"pages":[{"title":"","date":"2020-01-15T03:33:52.175Z","updated":"2020-01-15T03:33:52.175Z","comments":true,"path":"404.html","permalink":"http://denbgojing.com/404.html","excerpt":"","text":"你要找的内容不存在! 返回首页"},{"title":"tags","date":"2020-01-14T12:42:52.000Z","updated":"2020-01-14T12:43:46.157Z","comments":true,"path":"tags/index.html","permalink":"http://denbgojing.com/tags/index.html","excerpt":"","text":""},{"title":"about","date":"2020-01-15T02:32:15.000Z","updated":"2020-01-15T12:10:22.196Z","comments":true,"path":"about/index.html","permalink":"http://denbgojing.com/about/index.html","excerpt":"","text":"About 少壮不努力,后跳带剑气 java-web开发者,就职于一家混日子的小公司,每天过着摸鱼的生活,很少加班,也不掉头发,完全一个假程序员,不过我很开心. 虽然工作年限也不短了,但是还远没有到知识输出那个境界,开此博客主要目的就收记录我积累的只是和经验,有些东西靠脑子记还真容易忘掉. 没开放评论,因为如果要问什么,我估计会被问懵逼,如果真要和我杠,请发送邮件至dengbojing@qq.com,我这人还是比较钢精的,说不定会回邮件;同样如果你有什么好的东西和我分享或者愿意指导我,那鄙人会欣喜若狂. 至于本站内容,随便复制粘贴,知识只有传播和分享才能体现他的价值,不然就是一堆冰冷的文字."}],"posts":[{"title":"docker入门学习","slug":"docker-new","date":"2020-01-25T13:12:50.000Z","updated":"2020-01-25T17:32:42.454Z","comments":true,"path":"2020/01/25/docker-new/","link":"","permalink":"http://denbgojing.com/2020/01/25/docker-new/","excerpt":"docker入门","text":"docker入门 引言 作于2020年春节大年初一晚,此时疫情真的是猛于虎,为了避免给我媳妇她们医院带来不必要的麻烦,老实在家呆着学学新知识,提升自我. Talk is cheap, show me the code 介绍 Docker 使用 Google 公司推出的 Go 语言 进行开发实现,基于 Linux 内核的 cgroup,namespace,以及 AUFS 类的 Union FS 等技术,对进程进行封装隔离,属于操作 系统层面的虚拟化技术 个人理解就是一种虚拟化技术,类似之前接触过的lvm(linux virtual machine),但是有很大的不同,lvm是有一套完整的系统,虚拟出一套硬件系统和操作系统,然后在该系统之上又有很多的应用;而容器技术里面的应用直接是运行在容器宿主的内核之上,也没有虚拟除一套硬件,一套操作系统;所以容器很轻便小巧. ps: 从以上描述可以看出,容器技术更适用于持续集成和devOps,有点 java--Complie Once,Run Anywhere 的意思,只需要打包一次,在任何地方,任何系统之上都能使用,不存在之前 各种环境 (开发环境,测试环境,灰度环境,正式环境)导致的[这段代码在我机器上好好的啊,怎么可能有问题] 安装 注册docker hub 账号 在docker官方文档上找到对应操作系统的下载地址ps: 文件还是有点大,建议使用迅雷等p2p工具下载. 本人使用windows专业版系统,选择docker desktop for windows按照官网提示下载,完成之后不着急安装,此时需要先启动hyper-v,docker desktop是依赖hyper-v的,开启hype-v之后需要重启电脑,重启之后安装docker desktop,安装过程省略,下一步下一步即可.ps: 如果你是windows 家庭版,请参考这篇文章 启动docker desktop,在系统托盘图标右键-&gt;setting,找到resources-&gt;file sharing,选择你要共享的盘符,因为docker desktop默认是使用hyper-v虚拟机,而hyper-v虚拟机默认的镜像地址都是在C盘,也就是系统盘,这会导致c盘不够用,可以直接在resources-&gt;advanced下面找到disak image location修改镜像位置,本人是没有修改,这里本人是开启了共享盘符,把之后镜像使用的存储空间映射到本地其他磁盘上,这样解决了大部分存储空间的问题,镜像存储就不管了 入门 打开power shell,这里最好是不要使用其他命令终端,本人之前学习时候使用cmd,使用cmd是有坑的,后面会讲到,输入docker login,按照提示输入之前在docker hub上注册的用户名,密码,第一次需要输入,后续可以不用,也可使用图像化界面登录,右键docker desktop系统托盘图标-&gt;login. 登录之后我们就可以是用docker search命令来搜索我们感兴趣的仓库了,比如我们安装一个mysql吧,docker search mysql,可以看到有很多的mysql镜像,还有star数和officialps: 根据是否是官方提供,可将镜像资源分为两类.一种是类似 mysql 这样的镜像,被称为基础镜像或根镜像.这些基础镜像由 Docker 公司创建、验证、支持、提供.这样的镜像往往使用单个单词作为名字.还有一种类型,比如 bitnami/mysql 镜像,它是由 Docker 的用户创建并维护的,往往带有用户名称前缀. 使用docker pull拉去镜像,具体命令如下 docker pull [选项] [Docker Registry 地址[:端口号]/]仓库名[:标签] 具体选项可以通过docker pull --help 来查看, docker registry地址: 默认是docker hub,一般不需要指定 仓库名: 前文提到镜像名称分为两段,&lt;username&gt;/&lt;soft name&gt;如果不指定默认是library,即docker官方的镜像. tag: 标签,如果不指定默认为latest,当然可以指定需要的版本,查询tag目前本人没有找到相应的命令,只能去docker hub搜索镜像然后查看tag 综上所述,此时只需使用docker pull mysql就可以了 可以是用docker image ls或者docker images 查看本地镜像此时可以看到镜像的大小和在docker hub大小是不一样的,这是因为,在docker hub显示的是压缩大小,docker hub作为一个中央镜像仓库,关心的是流量大小,而不是体积大小,所以会尽可能的压缩镜像体积;而且在这里,显示的大小可能和实际占用磁盘空间大小还不一样,这是因为,镜像是有很多文件层组成,而文件层之间又存在继承,复用的关系,如果不同的镜像使用相同的基础层,那么只需要保存一份该基础层就可以了,不同镜像的其他层可以直接引用该基础层,可以使用docker system df -v来查看具体的占用情况,同时可以使用docker system prune来清理磁盘空间.docker image ls 支持通配符,如 docker images my* 可以将所有my开头的镜像都列出docker image ls -q 可以只显示镜像的 ID此外还支持 -f(--filter) 过滤模式, 比如: docker images -f since=mysql 会列出在 mysql之后的所有镜像,将 since 换成 before 可以列出之前的镜像 启动容器,每一个容器都是一个镜像实例,这个就像java里面的oop思想一样,一个镜像就是一个类,一个类的对象对应一个容器,java 里面使用new关键字实例化对象,这里我们使用docker run来启动一个容器,具体命令参数: docker run [OPTIONS] IMAGE [COMMAND] [ARG…] 此处常用的 options 有 -p 指定端口号, -P 指定端口号映射为本机随机端口号; -e 指定容器内部的环境变量;-d 指定为后台启动;-i 保持stdin标准的输入流打开状态,即使没有链接; -t 分配一个伪终端, -v 指定文件映射,即讲本地的一个目录或者文件映射到容器内部;具体启动命令: docker run -d -p 3305:3306 –privileged=true -e MYSQL_ROOT_PASSWORD=xxxx –name mysqltest -v /f/mysql/data:/var/lib/mysql -v /f/mysql/conf/my.cnf:/etc/mysql/my.cnf-v //f/mysql/mysql-files:/var/lib/mysql-files/ mysql:latest –character-set-server=utf8mb4 –collation-server=utf8mb4_unicode_ci 解释一下,此时我们就把容器内部的3306端口映射为宿主机的3305端口,并且设置了mysql的配置,数据存储位置,并且进行了一系列的mysql参数设置,指定了 msyql root 的密码为xxx,–privileged是让容器内部的用户获取宿主机特殊权限,此处一定要把文件映射在你已经共享的盘符,不然会失败 查看容器状态, docker container ls -a 或 docker ps -a 可以看到容器的状态,映射端口,名字等;使用 docker stop &lt;container name\\id&gt; 停止容器, 使用 docker start &lt;container name\\id&gt; 再次启动容器,注意第一次启动容器使用 docker run 命令,该命令会创建并启动一个容器, 之后并不需要在run,只需要执行start就可以了,此外 docker run 执行时,如果指定镜像不存在,该命令会自动拉去默认仓库所匹配的镜像 删除镜像和容器删除镜像使用 docker image rm 或 docker rmi 加上镜像的 ID 来删除镜像删除容器使用 docker container rm 或 docker rm 加上容器 ID 删除容器,可以添加 -f 强制删除一个正在运行的容器;此外如果只是想清理未被容器使用的镜像可以使用 docker image prune同理,可以使用 docker container prune 清理未运行的容器如果需要删除的容器或者镜像太多,手动一个个输入就显得有点智障了,此时可以使用 docker image ls -q 来配合批量删除,比如:docker rmi $(docker image ls -q -f since=mysql)此时就会将mysql之前所有的镜像都删除ps: 此处有之前说的 cmd 的坑,使用 cmd 会报错,改用 power shell 就不会 后记基础入门就这些,后续根据自身所学内容,会陆陆续续的记录更多的东西,比如如何创建一个docker容器啊,导入导出镜像啊,私有仓库的搭建等等. 不积跬步，无以至千里；不积小流，无以成江海","categories":[],"tags":[{"name":"docker","slug":"docker","permalink":"http://denbgojing.com/tags/docker/"}]},{"title":"使用hexo+github pages建立静态blog","slug":"first","date":"2020-01-14T11:32:51.000Z","updated":"2020-01-16T01:56:33.076Z","comments":true,"path":"2020/01/14/first/","link":"","permalink":"http://denbgojing.com/2020/01/14/first/","excerpt":"好记性不如烂笔头 记录一下使用hexo + github pages搭建博客的过程,以及过程中遇到的坑;同时也给阅读这篇文章,想要搭建博客的人一点帮助","text":"好记性不如烂笔头 记录一下使用hexo + github pages搭建博客的过程,以及过程中遇到的坑;同时也给阅读这篇文章,想要搭建博客的人一点帮助 为什么搞独立blog市面上blog service多如牛毛为啥非要搞自己的,因为独立的才是自己的 为什么使用gihub pages因为不用买服务器,免费而且稳定,也无需域名,只需要你有github账号就能用 Talk is cheap, show me the code Git git根据自己电脑下载相应版本,本人是win10电脑使用git bash. 安装完成打开git bash, 输入git --version测试是否安装成功 注册github账号(全球最大的同性交友网站,你值得拥有). 新建&lt;username&gt;.github.io仓库. node node根据自己电脑下载相应版本 安装完成之后,在之前的git bash输入node --version测试是否安装成功 Hexo 安装好 Node.js 后，通过 npm 安装 Hexo npm install hexo-cli -g ps: 可能安装失败,如果失败,安装cnpm,然后在安装hexo;或者挂代理,走梯子 npm install -g cnpm –registry=https://registry.npm.taobao.org 安装 Hexo 完成后,执行 hexo init &lt;folder&gt;cd &lt;folder&gt;npm install 执行完成之后目录会像 ├── _config.yml ├── node_modules │ ├── hexo │ ├── hexo-generator-archive │ ├── hexo-generator-category │ ├── hexo-generator-index │ ├── hexo-generator-tag │ ├── hexo-renderer-ejs │ ├── hexo-renderer-marked │ ├── hexo-renderer-stylus │ └── hexo-server ├── package.json ├── scaffolds │ ├── draft.md │ ├── page.md │ └── post.md ├── source │ └── _posts └── themes └── landscape ps: 简单说明一下目录作用 _config.yml 配置文件,网站的标题,作者,主题配置等 node_modules hexo的模块,较少关心 package.json 项目描述文件,不用关心 scaffolds 模版配置,较少关心 source–&gt;_post 主要存放我们写的文章 themes hexo主题,文件夹名称对应为主题名称 配置_config.yml 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566# Sitetitle: Hexo #标题subtitle: #副标题description: #描述author: #你的名字language: zh #网站使用的语言,注意使用主题下面的语言(themes--&gt;&lt;要使用的主题&gt;--&gt;languages)不然会出现未知结果timezone: Asia&#x2F;Shanghai #网站时区 # URLurl: https:&#x2F;&#x2F;dengbojing.com #地址(如果未申请域名则不需要填写)root: &#x2F; #根目录permalink: :year&#x2F;:month&#x2F;:day&#x2F;:title&#x2F; #文章的永久链接格式permalink_defaults: # trailing_index: true # Set to false to remove trailing &#39;index.html&#39; from permalinks trailing_html: true # Set to false to remove trailing &#39;.html&#39; from permalinks# Directorysource_dir: source #资源文件夹public_dir: public #由资源文件夹生成而来tag_dir: tags #标签文件夹,默认是没有的需要使用hexo new page tags 自行创建archive_dir: archives #归档文件夹category_dir: categories #分类文件夹,默认是没有的需要使用hexo new page tags 自行创建code_dir: downloads&#x2F;code #Include code 文件夹i18n_dir: :lang #国际化（i18n）文件夹skip_render: #跳过指定文件的解析# Writingnew_post_name: title.md # 新文章的文件名称default_layout: post #预设布局titlecase: false # 把标题转换为单词首字母大写external_link: enable: true # 在新标签中打开链接 field: site exclude: &#39;&#39; #排除文件filename_case: 0 #把文件名称转换为 (1) 小写或 (2) 大写render_drafts: false #显示草稿post_asset_folder: false #启动 Asset 文件夹，为 true 时，每次建立文件时，Hexo 会自动建立一个与文章同名的文件夹relative_link: false #把链接改为与根目录的相对位址future: true #显示未来的文章highlight: #代码块高亮,很多主题要求此项为false enable: true line_number: true auto_detect: true tab_replace:# Category &amp; Tagdefault_category: uncategorized #默认分类category_map: #分类别名tag_map: #标签别名# Date &#x2F; Time formatdate_format: YYYY-MM-DD #日期格式time_format: HH:mm:ss #时间格式# Paginationper_page: 10 #每页显示的文章量 (0关闭分页功能)pagination_dir: page #分页目录# Extensionstheme: next #当前主题名称(本人使用的非默认主题)# Deploymentdeploy: #部署 type: git repo: https:&#x2F;&#x2F;github.com&#x2F;username&#x2F;username.github.io.git #仓库地址 branch: master #分支名称 打开看看, 在git bash中使用 hexo g 命令生成文章,hexo s命令启动服务,下面提示访问localhost:4000,访问一下看到使用默认主题的网站 写文章 使用hexo new post &lt;filename&gt; 创建自己的第一篇文章 找到source–&gt;_post,打开&lt;filename&gt;.md 更多写作用法 123456---title: 使用hexo+github pages建立静态blogdate: 2020-01-14 19:32:51tags: [git,hexo]categories: hexo--- 在date下面添加分类和标签,可选 在—下面写正文内容,可以使用&lt;!--more--&gt;分割 比如: 简介 &lt;!--more--&gt; 正文 本地预览hexo g生成hexo s启动打开浏览器,输入localhost:4000看看吧 部署到服务器 安装一键部署 npm install hexo-deployer-git –save 执行 hexo clean(可选,正常情况不需要) hexo d 部署到&lt;username&gt;.github.io 后记 使用过程中遇到很多问题,目前都没有解决, 比如有些主题莫名看不到tegs和categories仓库,最后选来选去只能使用next主题 还有写modules(比如七牛云)安装之后即使你不启用你也得写配置","categories":[{"name":"hexo","slug":"hexo","permalink":"http://denbgojing.com/categories/hexo/"}],"tags":[{"name":"git","slug":"git","permalink":"http://denbgojing.com/tags/git/"},{"name":"hexo","slug":"hexo","permalink":"http://denbgojing.com/tags/hexo/"}]}]}